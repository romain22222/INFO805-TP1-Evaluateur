/* package et imports */
package fr.usmb.m1isc.compilation.simple;
import java_cup.runtime.Symbol;

// nom de la classe a generer
class SimpleParser;

/* inclusion de code */

action code {:
    // pour utilisation dans les actions (classe action)
:};


parser code {:
    // pour le parser (redefinition de la methode reportant les erreurs d'analyse)
    public void report_error(String message, Object info) {
        String m = "";
        if (info instanceof java_cup.runtime.Symbol) {
            Symbol s = ((Symbol) info);     
            if (s.left >= 0) {
                /* Ajoute le numero de ligne  */
                m = m + "Ligne " + (s.left+1) + " ";
            }
            if (s.right >= 0) {
                /* Ajoute le numero de colonne  */
                m = m + "Colonne " + (s.right+1) + " ";
            }
            if (s.left >=0  || s.right >= 0) {
                m = m + ": ";            
            }
        }
        m = m + "Erreur de syntaxe";
        System.out.println(m);
    }
:};

init with {:
    //    initialisation du parser
:};

/* declarations (terminaux, non-terminaux, etc.) */
/* symboles terminaux */
terminal ENDOP, LEFTBRAC, RIGHTBRAC, PLUS, MINUS, UMINUS, MULT, DIV, MOD;
terminal int NOMBRE;

/* non terminaux */
non terminal calcul, suiteCalcul;
non terminal Integer operable;

precedence left PLUS, MINUS;
precedence left MULT, DIV, MOD;
precedence right UMINUS;


/* grammaire */
suiteCalcul ::= calcul suiteCalcul | calcul;
calcul ::= operable:v {: System.out.print("OK : res = "); System.out.println(v); :} ENDOP | error ENDOP;
operable ::= operable:v1 PLUS operable:v2 {: RESULT = v1 + v2; :} |
            operable:v1 MINUS operable:v2 {: RESULT = v1 - v2; :} |
            MINUS operable:v2 {: RESULT = - v2; :}  %prec UMINUS|
            operable:v1 MULT operable:v2 {: RESULT = v1 * v2; :} |
            operable:v1 DIV operable:v2 {: RESULT = v1 / v2; :} |
            operable:v1 MOD operable:v2 {: RESULT = v1 % v2; :} |
            NOMBRE:v {: RESULT = v; :} |
            LEFTBRAC operable:v RIGHTBRAC {: RESULT = v; :} ;

